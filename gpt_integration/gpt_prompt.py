import requests
import time
from bs4 import BeautifulSoup

def ask_gpt(news_url, openai_api_key):
    response = requests.get(news_url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        for script in soup(["script", "style"]):
            script.decompose()
        visible_text = soup.get_text(separator='\n', strip=True)
    else:
        print(f"Erreur lors de la requ√™te GET : {response.status_code}")
        return None

    url = 'https://api.openai.com/v1/chat/completions'
    headers = {
        'Authorization': f'Bearer {openai_api_key}',
        'Content-Type': 'application/json'
    }
    messages = [
        {
            "role": "system",
            "content": (
                "Tu es un expert en cybers√©curit√©, et ta t√¢che est d'analyser un article d'actualit√© pour d√©terminer s'il est suffisamment int√©ressant pour √™tre partag√© avec une audience de professionnels de la cybers√©curit√© sur LinkedIn. "
                "L'article doit r√©pondre √† plusieurs crit√®res : "
                "1. Repr√©sente-t-il une menace ou un d√©veloppement significatif dans le domaine de la cybers√©curit√© ? "
                "2. Est-il pertinent pour les experts en cybers√©curit√©, avec des informations techniques ou strat√©giques utiles ? "
                "3. L'article provient-il d'une source cr√©dible et bien √©tablie dans le domaine ? "
                "4. La nouvelle est-elle r√©cente et a-t-elle un impact potentiel sur les entreprises ou les pratiques en cybers√©curit√© ? "
                "Si l'article ne remplit pas ces crit√®res, conclut simplement que 'Cet article n'est pas suffisamment int√©ressant pour √™tre publi√©'. "
                "Sinon, r√©dige un post LinkedIn professionnel et engageant qui inclut : "
                "1. Un titre percutant et informatif. "
                "2. Un r√©sum√© concis qui met en avant les √©l√©ments cl√©s de l'article, en √©vitant les d√©tails superflus. "
                "3. Des hashtags pertinents pour maximiser la port√©e aupr√®s de l'audience cible. "
                "4. ajoute la source url. "
                "N'inclut pas d'√©valuation ou de commentaire sur la d√©cision de publier. Limite ta r√©ponse √† ce qui doit √™tre publi√© sur LinkedIn, en fran√ßais."
                "Voici un exemple de post linkedin:"
                "üö® ALERTE CYBERS√âCURIT√â : VULN√âRABILIT√â CRITIQUE D√âCOUVERTE DANS LOG4J üö®"
                ""
                "Une nouvelle faille de s√©curit√©, surnomm√©e Log4Shell, a √©t√© d√©couverte dans la biblioth√®que de journalisation Log4j, largement utilis√©e dans des milliers d'applications et services √† travers le monde. Cette vuln√©rabilit√© critique (CVE-2021-44228) permettrait √† des attaquants de prendre le contr√¥le de serveurs sans authentification, simplement en envoyant des requ√™tes malveillantes."
                ""
                "üéØ Pourquoi est-ce si grave ?"
                "Log4j est un composant essentiel dans de nombreuses infrastructures IT, ce qui signifie que cette faille touche un grand nombre d‚Äôorganisations, grandes ou petites. Les cybercriminels exploitent d√©j√† cette vuln√©rabilit√© pour mener des attaques massives, incluant le d√©ploiement de ransomwares."
                ""
                "üîß Que faire ?"
                ""
                "Patch imm√©diat : Assurez-vous que vos syst√®mes utilisent la version la plus r√©cente de Log4j, o√π la vuln√©rabilit√© est corrig√©e."
                "Surveillance accrue : Renforcez la surveillance de votre trafic r√©seau pour d√©tecter toute activit√© suspecte."
                "Communication : Informez imm√©diatement vos √©quipes IT et de s√©curit√© pour qu‚Äôelles prennent les mesures n√©cessaires."
                "C'est un rappel brutal de l'importance de maintenir une vigilance constante en mati√®re de s√©curit√©. Nous devons rester proactifs pour prot√©ger nos syst√®mes contre de telles menaces."

            )
        },
        {
            "role": "user",
            "content": (
                f"Voici l'article : {visible_text}\n\n"
                f"Source : {news_url}"
            )
        }
    ]

    payload = {
        "model": "gpt-4",
        "messages": messages
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        response_data = response.json()
        chatgpt_message = response_data['choices'][0]['message']['content']
        time.sleep(20)
        if "Cet article n'est pas suffisamment int√©ressant pour √™tre publi√©" in chatgpt_message:
            print("La nouvelle n'est pas jug√©e int√©ressante pour √™tre publi√©e.")
            return None
        else:
            return chatgpt_message

    except Exception as e:
        print(f"Erreur lors de la requ√™te √† l'API ChatGPT : {e}")
        return None